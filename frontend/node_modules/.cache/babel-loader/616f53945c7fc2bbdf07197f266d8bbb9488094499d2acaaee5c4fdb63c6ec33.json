{"ast":null,"code":"// // Imports\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from '../../../api';\n// const questionSlice = createSlice({\n//   name: 'questions',\n//   initialState: {\n//     error: '',\n//     loading: false,\n//     data: [],\n//     randomIndex: 0,\n//   },\n\n//   reducers: {},\n//   // adding cases for handling state life cycle of promise returned by thunk\n//   extraReducers: (builder) => {\n//     builder.addCase(fetchQuestion.pending, (state) => {\n//       return { ...state, loading: true };\n//     });\n//     builder.addCase(fetchQuestion.fulfilled, (state, action) => {\n//       return {\n//         ...state,\n//         loading: false,\n//         data: action.payload.data,\n//         randomIndex: Math.floor(\n//           Math.random() * (action.payload.data.length - 0) + 0\n//         ),\n//       };\n//     });\n//     builder.addCase(fetchQuestion.rejected, (state, action) => {\n//       return { ...state, error: action.payload, loading: false };\n//     });\n//   },\n// });\n// export default questionSlice.reducer;\n\n// // Thunks Here\n// export const fetchQuestion = createAsyncThunk(\n//   'questions/fetch',\n//   async (data, { rejectWithValue }) => {\n//     try {\n//       return await axios.get(`/questions/${data}`);\n//     } catch (error) {\n//       return rejectWithValue(error?.response?.data);\n//     }\n//   }\n// );\n\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from '../../../api';\n\n// export const fetchQuestion = createAsyncThunk(\n//   'questions/fetch',\n//   async (data, { rejectWithValue }) => {\n//     try {\n//       return await axios.get(`/questions/${data}`);\n//     } catch (error) {\n//       return rejectWithValue(error?.response?.data);\n//     }\n//   }\n// );\n\n// const questionSlice = createSlice({\n//   name: 'questions',\n//   initialState: {\n//     error: '',\n//     loading: false,\n//     data: [],\n//     randomIndex: 0,\n//   },\n//   reducers: {},\n//   extraReducers: (builder) => {\n//     builder.addCase(fetchQuestion.pending, (state) => {\n//       return { ...state, loading: true };\n//     });\n//     builder.addCase(fetchQuestion.fulfilled, (state, action) => {\n//       console.log('Fetched Question Data:', action.payload.data); // Log the fetched data\n//       return {\n//         ...state,\n//         loading: false,\n//         data: [action.payload],\n//         randomIndex: 0,\n//       };\n//     });\n//     builder.addCase(fetchQuestion.rejected, (state, action) => {\n//       return { ...state, error: action.payload, loading: false };\n//     });\n//   },\n// });\n\n// export default questionSlice.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/DELL/Desktop/Final_FYP/frontend/src/redux/features/Question/index.js"],"sourcesContent":["// // Imports\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from '../../../api';\n// const questionSlice = createSlice({\n//   name: 'questions',\n//   initialState: {\n//     error: '',\n//     loading: false,\n//     data: [],\n//     randomIndex: 0,\n//   },\n\n//   reducers: {},\n//   // adding cases for handling state life cycle of promise returned by thunk\n//   extraReducers: (builder) => {\n//     builder.addCase(fetchQuestion.pending, (state) => {\n//       return { ...state, loading: true };\n//     });\n//     builder.addCase(fetchQuestion.fulfilled, (state, action) => {\n//       return {\n//         ...state,\n//         loading: false,\n//         data: action.payload.data,\n//         randomIndex: Math.floor(\n//           Math.random() * (action.payload.data.length - 0) + 0\n//         ),\n//       };\n//     });\n//     builder.addCase(fetchQuestion.rejected, (state, action) => {\n//       return { ...state, error: action.payload, loading: false };\n//     });\n//   },\n// });\n// export default questionSlice.reducer;\n\n// // Thunks Here\n// export const fetchQuestion = createAsyncThunk(\n//   'questions/fetch',\n//   async (data, { rejectWithValue }) => {\n//     try {\n//       return await axios.get(`/questions/${data}`);\n//     } catch (error) {\n//       return rejectWithValue(error?.response?.data);\n//     }\n//   }\n// );\n\n\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from '../../../api';\n\n// export const fetchQuestion = createAsyncThunk(\n//   'questions/fetch',\n//   async (data, { rejectWithValue }) => {\n//     try {\n//       return await axios.get(`/questions/${data}`);\n//     } catch (error) {\n//       return rejectWithValue(error?.response?.data);\n//     }\n//   }\n// );\n\n// const questionSlice = createSlice({\n//   name: 'questions',\n//   initialState: {\n//     error: '',\n//     loading: false,\n//     data: [],\n//     randomIndex: 0,\n//   },\n//   reducers: {},\n//   extraReducers: (builder) => {\n//     builder.addCase(fetchQuestion.pending, (state) => {\n//       return { ...state, loading: true };\n//     });\n//     builder.addCase(fetchQuestion.fulfilled, (state, action) => {\n//       console.log('Fetched Question Data:', action.payload.data); // Log the fetched data\n//       return {\n//         ...state,\n//         loading: false,\n//         data: [action.payload],\n//         randomIndex: 0,\n//       };\n//     });\n//     builder.addCase(fetchQuestion.rejected, (state, action) => {\n//       return { ...state, error: action.payload, loading: false };\n//     });\n//   },\n// });\n\n// export default questionSlice.reducer;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}