{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Final_FYP\\\\frontend\\\\src\\\\component\\\\quiz.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { toast } from \"react-toastify\";\n// import { ClipLoader } from \"react-spinners\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { useNavigate } from \"react-router-dom\";\n// import SelectQuiz from \"../sub.png\";\n// import Timer from \"./Timer\";\n// import \"./index.css\";\n// import { setCurrentTeam, setTeamScore } from \"../redux/features/Team\";\n// // import React from 'react';\n// // import Popup from 'reactjs-popup';\n// // import 'reactjs-popup/dist/index.css';\n\n// const Quiz = (props) => {\n//   const navigate = useNavigate();\n//   const dispatch = useDispatch();\n//   const currentTeam = useSelector((state) => state.teams.currentTeam);\n//   const teams = useSelector((state) => state.teams.data);\n//   const totalTeams = useSelector((state) => state.teams.totalTeams);\n//   const loading = useSelector((state) => state.questions.loading);\n//   const randomIndex = useSelector((state) => state.questions.randomIndex);\n//   const questions = useSelector((state) => state.questions.data);\n//   // const [subjects, setSubjects] = useState([]);\n//   // const currentSubject = useSelector((state) => state.subjects.currentSubject);\n//   const timeDuration = useSelector((state) => state.timer.maxTime);\n//   const subject = useSelector((state) => state.teams.selectedSubject);\n\n//   if (loading) {\n//     return (\n//       <div\n//         style={{\n//           height: \"100vh\",\n//           display: \"flex\",\n//           justifyContent: \"center\",\n//           alignItems: \"center\",\n//         }}\n//       >\n//         <ClipLoader size=\"30\" />\n//       </div>\n//     );\n//   }\n//   if (questions.length === 0) {\n//     return (\n//       <div\n//         style={{\n//           height: \"100vh\",\n//           display: \"flex\",\n//           justifyContent: \"center\",\n//           alignItems: \"center\",\n//         }}\n//       >\n//         {/* <Popup posistion=' right center'  width='300px' height='300px'> */}\n//         <div> No Questions Found</div>\n//         {/* </Popup> */}\n//       </div>\n//     );\n//   }\n\n//   const currentQuestion = questions[randomIndex];\n\n//   // This function handles moving to next team or round\n//   const handleRound = () => {\n//     // Now move to next Team for current Round, but first we will make sure round is also completed\n//     if (currentTeam + 1 === totalTeams) {\n//       navigate(\"/result\", { state: { roundCompleted: true } });\n//     } else {\n//       dispatch(setCurrentTeam(currentTeam + 1));\n//       navigate(\"/subject\");\n//     }\n//   };\n\n//   const handleOptionSelect = (selectedOption) => {\n//     if (\n//       selectedOption.trim().toLowerCase() ===\n//       currentQuestion.ans.trim().toLowerCase()\n//     ) {\n//       toast.success(\"Correct !\");\n//       dispatch(\n//         setTeamScore({\n//           name: teams[currentTeam]?.teamname,\n//           score: teams[currentTeam]?.score + 10,\n//         })\n//       );\n//     } else {\n//       toast.error(\"Wrong!\");\n//     }\n//     handleRound();\n//   };\n\n//   return (\n//     <>\n//       <div\n//         className=\"quiz\"\n//         style={{\n//           backgroundImage: `url(${SelectQuiz})`,\n//           backgroundPosition: \"center center\",\n//           backgroundSize: \"cover\",\n//           backgroundRepeat: \"no-repeat\",\n//           width: \"100%\",\n//           height: \"100vh\",\n//         }}\n//       >\n//         <div className=\"container\">\n//           <div className=\"quiz-team-detail\">\n//             <div className=\"row\">\n//               <div className=\"col-lg-4 \">\n//                 {/* <h2 className=\"name\">Team {currentTeam + 1}</h2> */}\n//                 <h2 className=\"name\">\n//                   {teams[currentTeam].universityname || \"University Name\"}\n//                 </h2>\n//               </div>\n//               <div className=\"col-lg-4 \">\n//                 <h2 className=\"round\">{subject}</h2>\n//                 {/* <h2 className=\"round\">{[currentSubject].name}</h2> */}\n//               </div>\n//               <div className=\"col-lg-4   timer\">\n//                 <h1 className=\"circle\">\n//                   <Timer duration={timeDuration} handleRound={handleRound} />\n//                 </h1>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"quiz-content\">\n//             <div className=\"question\" key={currentQuestion._id}>\n//               {currentQuestion.image ? (\n//                 <div\n//                   style={{\n//                     display: \"flex\",\n//                     // justifyContent: \"center\",\n//                     // alignItems: \"center\",\n//                     width: \"100%\",\n//                     height: \"200px\",\n//                   }}\n//                 >\n//                   <img\n//                     src={\"/images/\" + currentQuestion.image}\n//                     alt=\"Cat playing with a ball\"\n//                     style={{\n//                       width: \"100%\",\n//                       maxWidth: \"500px\",\n//                       height: \"200px\",\n//                       maxHeight: \"300px\",\n//                     }}\n//                   />\n//                 </div>\n//               ) : (\n//                 currentQuestion.ques\n//               )}\n//             </div>\n//             <div className=\"options\" key={currentQuestion._id}>\n//               <p onClick={() => handleOptionSelect(currentQuestion.option1)}>\n//                 a. {currentQuestion.option1}\n//               </p>\n//               <p onClick={() => handleOptionSelect(currentQuestion.option2)}>\n//                 b. {currentQuestion.option2}\n//               </p>\n//               <p onClick={() => handleOptionSelect(currentQuestion.option3)}>\n//                 c. {currentQuestion.option3}\n//               </p>\n//               <p onClick={() => handleOptionSelect(currentQuestion.option4)}>\n//                 d. {currentQuestion.option4}\n//               </p>\n//             </div>\n//           </div>\n//           {/* <button\n//             disabled={currentQuestionIndex === questions.length - 1}\n//             onClick={handleNextQuestion}\n//           >\n//             Next Question\n//           </button> */}\n//         </div>\n//         <div className=\"current-score\">\n//           <p> Current Score: {teams[currentTeam]?.score || 0}</p>\n//         </div>\n//       </div>\n//     </>\n//   );\n// };\n\n// export default Quiz;\nimport React from \"react\";\nimport { toast } from \"react-toastify\";\nimport { ClipLoader } from \"react-spinners\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport SelectQuiz from \"../sub.png\";\nimport Timer from \"./Timer\";\nimport \"./index.css\";\nimport { setCurrentTeam, setTeamScore } from \"../redux/features/Team\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Quiz = props => {\n  _s();\n  var _teams$currentTeam3;\n  // Access necessary hooks and Redux store values\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const currentTeam = useSelector(state => state.teams.currentTeam);\n  const teams = useSelector(state => state.teams.data);\n  const totalTeams = useSelector(state => state.teams.totalTeams);\n  const loading = useSelector(state => state.questions.loading);\n  const randomIndex = useSelector(state => state.questions.randomIndex);\n  const questions = useSelector(state => state.questions.data);\n  const timeDuration = useSelector(state => state.timer.maxTime);\n  const subject = useSelector(state => state.teams.selectedSubject);\n  console.log();\n\n  // Loading state: Display spinner if questions are still loading\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ClipLoader, {\n        size: \"30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  }\n\n  // No questions found: Display message\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" No Questions Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Get the current question based on randomIndex\n  const currentQuestion = questions[randomIndex];\n\n  // Handle moving to the next team or round\n  const handleRound = () => {\n    if (currentTeam + 1 === totalTeams) {\n      // All teams completed the current round\n      navigate(\"/result\", {\n        state: {\n          roundCompleted: true\n        }\n      });\n    } else {\n      // Move to the next team for the current round\n      dispatch(setCurrentTeam(currentTeam + 1));\n      navigate(\"/subject\");\n    }\n  };\n\n  // Handle option selection\n  const handleOptionSelect = selectedOption => {\n    if (selectedOption.trim().toLowerCase() === currentQuestion.ans.trim().toLowerCase()) {\n      var _teams$currentTeam, _teams$currentTeam2;\n      toast.success(\"Correct !\");\n      // Update team score if the answer is correct\n      dispatch(setTeamScore({\n        name: (_teams$currentTeam = teams[currentTeam]) === null || _teams$currentTeam === void 0 ? void 0 : _teams$currentTeam.teamname,\n        score: ((_teams$currentTeam2 = teams[currentTeam]) === null || _teams$currentTeam2 === void 0 ? void 0 : _teams$currentTeam2.score) + 10\n      }));\n    } else {\n      toast.error(\"Wrong!\");\n    }\n    handleRound();\n  };\n\n  // Render the quiz interface\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz\",\n      style: {\n        backgroundImage: `url(${SelectQuiz})`,\n        backgroundPosition: \"center center\",\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n        width: \"100%\",\n        height: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-team-detail\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-4\",\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"name\",\n                children: teams[currentTeam].universityname || \"University Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-4\",\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"round\",\n                children: subject\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-4 timer\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"circle\",\n                children: /*#__PURE__*/_jsxDEV(Timer, {\n                  duration: timeDuration,\n                  handleRound: handleRound\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-content\",\n          children: [currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question\",\n            children: [currentQuestion.image && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                width: \"100%\",\n                height: \"200px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"/images/\" + currentQuestion.image,\n                alt: \"Cat playing with a ball\",\n                style: {\n                  width: \"100%\",\n                  maxWidth: \"500px\",\n                  height: \"200px\",\n                  maxHeight: \"300px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 19\n            }, this), currentQuestion.ques && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: currentQuestion.ques\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 42\n            }, this)]\n          }, currentQuestion._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options\",\n            children: [currentQuestion.option1 && /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => handleOptionSelect(currentQuestion.option1),\n              children: [\"a. \", currentQuestion.option1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 19\n            }, this), currentQuestion.option2 && /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => handleOptionSelect(currentQuestion.option2),\n              children: [\"b. \", currentQuestion.option2]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 19\n            }, this), currentQuestion.option3 && /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => handleOptionSelect(currentQuestion.option3),\n              children: [\"c. \", currentQuestion.option3]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 19\n            }, this), currentQuestion.option4 && /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => handleOptionSelect(currentQuestion.option4),\n              children: [\"d. \", currentQuestion.option4]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 19\n            }, this)]\n          }, currentQuestion._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-score\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" Current Score: \", ((_teams$currentTeam3 = teams[currentTeam]) === null || _teams$currentTeam3 === void 0 ? void 0 : _teams$currentTeam3.score) || 0]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Quiz, \"8SdQQqvDKKsADBPKuii/sdlbu30=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","toast","ClipLoader","useSelector","useDispatch","useNavigate","SelectQuiz","Timer","setCurrentTeam","setTeamScore","Quiz","props","navigate","dispatch","currentTeam","state","teams","data","totalTeams","loading","questions","randomIndex","timeDuration","timer","maxTime","subject","selectedSubject","console","log","height","display","justifyContent","alignItems","length","currentQuestion","handleRound","roundCompleted","handleOptionSelect","selectedOption","trim","toLowerCase","ans","success","name","teamname","score","error","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","width","universityname","image","maxWidth","maxHeight","ques","_id","option1","option2","option3","option4"],"sources":["C:/Users/DELL/Desktop/Final_FYP/frontend/src/component/quiz.js"],"sourcesContent":["// import React from \"react\";\r\n// import { toast } from \"react-toastify\";\r\n// import { ClipLoader } from \"react-spinners\";\r\n// import { useSelector, useDispatch } from \"react-redux\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import SelectQuiz from \"../sub.png\";\r\n// import Timer from \"./Timer\";\r\n// import \"./index.css\";\r\n// import { setCurrentTeam, setTeamScore } from \"../redux/features/Team\";\r\n// // import React from 'react';\r\n// // import Popup from 'reactjs-popup';\r\n// // import 'reactjs-popup/dist/index.css';\r\n\r\n// const Quiz = (props) => {\r\n//   const navigate = useNavigate();\r\n//   const dispatch = useDispatch();\r\n//   const currentTeam = useSelector((state) => state.teams.currentTeam);\r\n//   const teams = useSelector((state) => state.teams.data);\r\n//   const totalTeams = useSelector((state) => state.teams.totalTeams);\r\n//   const loading = useSelector((state) => state.questions.loading);\r\n//   const randomIndex = useSelector((state) => state.questions.randomIndex);\r\n//   const questions = useSelector((state) => state.questions.data);\r\n//   // const [subjects, setSubjects] = useState([]);\r\n//   // const currentSubject = useSelector((state) => state.subjects.currentSubject);\r\n//   const timeDuration = useSelector((state) => state.timer.maxTime);\r\n//   const subject = useSelector((state) => state.teams.selectedSubject);\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <div\r\n//         style={{\r\n//           height: \"100vh\",\r\n//           display: \"flex\",\r\n//           justifyContent: \"center\",\r\n//           alignItems: \"center\",\r\n//         }}\r\n//       >\r\n//         <ClipLoader size=\"30\" />\r\n//       </div>\r\n//     );\r\n//   }\r\n//   if (questions.length === 0) {\r\n//     return (\r\n//       <div\r\n//         style={{\r\n//           height: \"100vh\",\r\n//           display: \"flex\",\r\n//           justifyContent: \"center\",\r\n//           alignItems: \"center\",\r\n//         }}\r\n//       >\r\n//         {/* <Popup posistion=' right center'  width='300px' height='300px'> */}\r\n//         <div> No Questions Found</div>\r\n//         {/* </Popup> */}\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const currentQuestion = questions[randomIndex];\r\n\r\n//   // This function handles moving to next team or round\r\n//   const handleRound = () => {\r\n//     // Now move to next Team for current Round, but first we will make sure round is also completed\r\n//     if (currentTeam + 1 === totalTeams) {\r\n//       navigate(\"/result\", { state: { roundCompleted: true } });\r\n//     } else {\r\n//       dispatch(setCurrentTeam(currentTeam + 1));\r\n//       navigate(\"/subject\");\r\n//     }\r\n//   };\r\n\r\n//   const handleOptionSelect = (selectedOption) => {\r\n//     if (\r\n//       selectedOption.trim().toLowerCase() ===\r\n//       currentQuestion.ans.trim().toLowerCase()\r\n//     ) {\r\n//       toast.success(\"Correct !\");\r\n//       dispatch(\r\n//         setTeamScore({\r\n//           name: teams[currentTeam]?.teamname,\r\n//           score: teams[currentTeam]?.score + 10,\r\n//         })\r\n//       );\r\n//     } else {\r\n//       toast.error(\"Wrong!\");\r\n//     }\r\n//     handleRound();\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div\r\n//         className=\"quiz\"\r\n//         style={{\r\n//           backgroundImage: `url(${SelectQuiz})`,\r\n//           backgroundPosition: \"center center\",\r\n//           backgroundSize: \"cover\",\r\n//           backgroundRepeat: \"no-repeat\",\r\n//           width: \"100%\",\r\n//           height: \"100vh\",\r\n//         }}\r\n//       >\r\n//         <div className=\"container\">\r\n//           <div className=\"quiz-team-detail\">\r\n//             <div className=\"row\">\r\n//               <div className=\"col-lg-4 \">\r\n//                 {/* <h2 className=\"name\">Team {currentTeam + 1}</h2> */}\r\n//                 <h2 className=\"name\">\r\n//                   {teams[currentTeam].universityname || \"University Name\"}\r\n//                 </h2>\r\n//               </div>\r\n//               <div className=\"col-lg-4 \">\r\n//                 <h2 className=\"round\">{subject}</h2>\r\n//                 {/* <h2 className=\"round\">{[currentSubject].name}</h2> */}\r\n//               </div>\r\n//               <div className=\"col-lg-4   timer\">\r\n//                 <h1 className=\"circle\">\r\n//                   <Timer duration={timeDuration} handleRound={handleRound} />\r\n//                 </h1>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"quiz-content\">\r\n//             <div className=\"question\" key={currentQuestion._id}>\r\n//               {currentQuestion.image ? (\r\n//                 <div\r\n//                   style={{\r\n//                     display: \"flex\",\r\n//                     // justifyContent: \"center\",\r\n//                     // alignItems: \"center\",\r\n//                     width: \"100%\",\r\n//                     height: \"200px\",\r\n//                   }}\r\n//                 >\r\n//                   <img\r\n//                     src={\"/images/\" + currentQuestion.image}\r\n//                     alt=\"Cat playing with a ball\"\r\n//                     style={{\r\n//                       width: \"100%\",\r\n//                       maxWidth: \"500px\",\r\n//                       height: \"200px\",\r\n//                       maxHeight: \"300px\",\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               ) : (\r\n//                 currentQuestion.ques\r\n//               )}\r\n//             </div>\r\n//             <div className=\"options\" key={currentQuestion._id}>\r\n//               <p onClick={() => handleOptionSelect(currentQuestion.option1)}>\r\n//                 a. {currentQuestion.option1}\r\n//               </p>\r\n//               <p onClick={() => handleOptionSelect(currentQuestion.option2)}>\r\n//                 b. {currentQuestion.option2}\r\n//               </p>\r\n//               <p onClick={() => handleOptionSelect(currentQuestion.option3)}>\r\n//                 c. {currentQuestion.option3}\r\n//               </p>\r\n//               <p onClick={() => handleOptionSelect(currentQuestion.option4)}>\r\n//                 d. {currentQuestion.option4}\r\n//               </p>\r\n//             </div>\r\n//           </div>\r\n//           {/* <button\r\n//             disabled={currentQuestionIndex === questions.length - 1}\r\n//             onClick={handleNextQuestion}\r\n//           >\r\n//             Next Question\r\n//           </button> */}\r\n//         </div>\r\n//         <div className=\"current-score\">\r\n//           <p> Current Score: {teams[currentTeam]?.score || 0}</p>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Quiz;\r\nimport React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SelectQuiz from \"../sub.png\";\r\nimport Timer from \"./Timer\";\r\nimport \"./index.css\";\r\nimport { setCurrentTeam, setTeamScore } from \"../redux/features/Team\";\r\n\r\nconst Quiz = (props) => {\r\n  // Access necessary hooks and Redux store values\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const currentTeam = useSelector((state) => state.teams.currentTeam);\r\n  const teams = useSelector((state) => state.teams.data);\r\n  const totalTeams = useSelector((state) => state.teams.totalTeams);\r\n  const loading = useSelector((state) => state.questions.loading);\r\n  const randomIndex = useSelector((state) => state.questions.randomIndex);\r\n  const questions = useSelector((state) => state.questions.data);\r\n  const timeDuration = useSelector((state) => state.timer.maxTime);\r\n  const subject = useSelector((state) => state.teams.selectedSubject);\r\n\r\n\r\n  console.log()\r\n\r\n  // Loading state: Display spinner if questions are still loading\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        style={{\r\n          height: \"100vh\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <ClipLoader size=\"30\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // No questions found: Display message\r\n  if (questions.length === 0) {\r\n    return (\r\n      <div\r\n        style={{\r\n          height: \"100vh\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <div> No Questions Found</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Get the current question based on randomIndex\r\n  const currentQuestion = questions[randomIndex];\r\n\r\n  // Handle moving to the next team or round\r\n  const handleRound = () => {\r\n    if (currentTeam + 1 === totalTeams) {\r\n      // All teams completed the current round\r\n      navigate(\"/result\", { state: { roundCompleted: true } });\r\n    } else {\r\n      // Move to the next team for the current round\r\n      dispatch(setCurrentTeam(currentTeam + 1));\r\n      navigate(\"/subject\");\r\n    }\r\n  };\r\n\r\n  // Handle option selection\r\n  const handleOptionSelect = (selectedOption) => {\r\n    if (\r\n      selectedOption.trim().toLowerCase() ===\r\n      currentQuestion.ans.trim().toLowerCase()\r\n    ) {\r\n      toast.success(\"Correct !\");\r\n      // Update team score if the answer is correct\r\n      dispatch(\r\n        setTeamScore({\r\n          name: teams[currentTeam]?.teamname,\r\n          score: teams[currentTeam]?.score + 10,\r\n        })\r\n      );\r\n    } else {\r\n      toast.error(\"Wrong!\");\r\n    }\r\n    handleRound();\r\n  };\r\n\r\n  // Render the quiz interface\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"quiz\"\r\n        style={{\r\n          backgroundImage: `url(${SelectQuiz})`,\r\n          backgroundPosition: \"center center\",\r\n          backgroundSize: \"cover\",\r\n          backgroundRepeat: \"no-repeat\",\r\n          width: \"100%\",\r\n          height: \"100vh\",\r\n        }}\r\n      >\r\n        <div className=\"container\">\r\n          <div className=\"quiz-team-detail\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-4\">\r\n                <h2 className=\"name\">\r\n                  {teams[currentTeam].universityname || \"University Name\"}\r\n                </h2>\r\n              </div>\r\n              <div className=\"col-lg-4\">\r\n                <h2 className=\"round\">{subject}</h2>\r\n              </div>\r\n              <div className=\"col-lg-4 timer\">\r\n                <h1 className=\"circle\">\r\n                  <Timer duration={timeDuration} handleRound={handleRound} />\r\n                </h1>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"quiz-content\">\r\n            {currentQuestion && (\r\n              <div className=\"question\" key={currentQuestion._id}>\r\n                {currentQuestion.image && (\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      width: \"100%\",\r\n                      height: \"200px\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={\"/images/\" + currentQuestion.image}\r\n                      alt=\"Cat playing with a ball\"\r\n                      style={{\r\n                        width: \"100%\",\r\n                        maxWidth: \"500px\",\r\n                        height: \"200px\",\r\n                        maxHeight: \"300px\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                )}\r\n                {currentQuestion.ques && <p>{currentQuestion.ques}</p>}\r\n              </div>\r\n            )}\r\n            {currentQuestion && (\r\n              <div className=\"options\" key={currentQuestion._id}>\r\n                {currentQuestion.option1 && (\r\n                  <p\r\n                    onClick={() => handleOptionSelect(currentQuestion.option1)}\r\n                  >\r\n                    a. {currentQuestion.option1}\r\n                  </p>\r\n                )}\r\n                {currentQuestion.option2 && (\r\n                  <p\r\n                    onClick={() => handleOptionSelect(currentQuestion.option2)}\r\n                  >\r\n                    b. {currentQuestion.option2}\r\n                  </p>\r\n                )}\r\n                {currentQuestion.option3 && (\r\n                  <p\r\n                    onClick={() => handleOptionSelect(currentQuestion.option3)}\r\n                  >\r\n                    c. {currentQuestion.option3}\r\n                  </p>\r\n                )}\r\n                {currentQuestion.option4 && (\r\n                  <p\r\n                    onClick={() => handleOptionSelect(currentQuestion.option4)}\r\n                  >\r\n                    d. {currentQuestion.option4}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"current-score\">\r\n          <p> Current Score: {teams[currentTeam]?.score || 0}</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,aAAa;AACpB,SAASC,cAAc,EAAEC,YAAY,QAAQ,wBAAwB;AAAC;AAAA;AAEtE,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAA;EAAA;EACtB;EACA,MAAMC,QAAQ,GAAGP,WAAW,EAAE;EAC9B,MAAMQ,QAAQ,GAAGT,WAAW,EAAE;EAC9B,MAAMU,WAAW,GAAGX,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACF,WAAW,CAAC;EACnE,MAAME,KAAK,GAAGb,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC;EACtD,MAAMC,UAAU,GAAGf,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACE,UAAU,CAAC;EACjE,MAAMC,OAAO,GAAGhB,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACK,SAAS,CAACD,OAAO,CAAC;EAC/D,MAAME,WAAW,GAAGlB,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACK,SAAS,CAACC,WAAW,CAAC;EACvE,MAAMD,SAAS,GAAGjB,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACK,SAAS,CAACH,IAAI,CAAC;EAC9D,MAAMK,YAAY,GAAGnB,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACQ,KAAK,CAACC,OAAO,CAAC;EAChE,MAAMC,OAAO,GAAGtB,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACU,eAAe,CAAC;EAGnEC,OAAO,CAACC,GAAG,EAAE;;EAEb;EACA,IAAIT,OAAO,EAAE;IACX,oBACE;MACE,KAAK,EAAE;QACLU,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE,MAAM;QACfC,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE;MACd,CAAE;MAAA,uBAEF,QAAC,UAAU;QAAC,IAAI,EAAC;MAAI;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACpB;EAEV;;EAEA;EACA,IAAIZ,SAAS,CAACa,MAAM,KAAK,CAAC,EAAE;IAC1B,oBACE;MACE,KAAK,EAAE;QACLJ,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE,MAAM;QACfC,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE;MACd,CAAE;MAAA,uBAEF;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAA8B;MAAA;MAAA;MAAA;IAAA,QAC1B;EAEV;;EAEA;EACA,MAAME,eAAe,GAAGd,SAAS,CAACC,WAAW,CAAC;;EAE9C;EACA,MAAMc,WAAW,GAAG,MAAM;IACxB,IAAIrB,WAAW,GAAG,CAAC,KAAKI,UAAU,EAAE;MAClC;MACAN,QAAQ,CAAC,SAAS,EAAE;QAAEG,KAAK,EAAE;UAAEqB,cAAc,EAAE;QAAK;MAAE,CAAC,CAAC;IAC1D,CAAC,MAAM;MACL;MACAvB,QAAQ,CAACL,cAAc,CAACM,WAAW,GAAG,CAAC,CAAC,CAAC;MACzCF,QAAQ,CAAC,UAAU,CAAC;IACtB;EACF,CAAC;;EAED;EACA,MAAMyB,kBAAkB,GAAIC,cAAc,IAAK;IAC7C,IACEA,cAAc,CAACC,IAAI,EAAE,CAACC,WAAW,EAAE,KACnCN,eAAe,CAACO,GAAG,CAACF,IAAI,EAAE,CAACC,WAAW,EAAE,EACxC;MAAA;MACAvC,KAAK,CAACyC,OAAO,CAAC,WAAW,CAAC;MAC1B;MACA7B,QAAQ,CACNJ,YAAY,CAAC;QACXkC,IAAI,wBAAE3B,KAAK,CAACF,WAAW,CAAC,uDAAlB,mBAAoB8B,QAAQ;QAClCC,KAAK,EAAE,wBAAA7B,KAAK,CAACF,WAAW,CAAC,wDAAlB,oBAAoB+B,KAAK,IAAG;MACrC,CAAC,CAAC,CACH;IACH,CAAC,MAAM;MACL5C,KAAK,CAAC6C,KAAK,CAAC,QAAQ,CAAC;IACvB;IACAX,WAAW,EAAE;EACf,CAAC;;EAED;EACA,oBACE;IAAA,uBACE;MACE,SAAS,EAAC,MAAM;MAChB,KAAK,EAAE;QACLY,eAAe,EAAG,OAAMzC,UAAW,GAAE;QACrC0C,kBAAkB,EAAE,eAAe;QACnCC,cAAc,EAAE,OAAO;QACvBC,gBAAgB,EAAE,WAAW;QAC7BC,KAAK,EAAE,MAAM;QACbtB,MAAM,EAAE;MACV,CAAE;MAAA,wBAEF;QAAK,SAAS,EAAC,WAAW;QAAA,wBACxB;UAAK,SAAS,EAAC,kBAAkB;UAAA,uBAC/B;YAAK,SAAS,EAAC,KAAK;YAAA,wBAClB;cAAK,SAAS,EAAC,UAAU;cAAA,uBACvB;gBAAI,SAAS,EAAC,MAAM;gBAAA,UACjBb,KAAK,CAACF,WAAW,CAAC,CAACsC,cAAc,IAAI;cAAiB;gBAAA;gBAAA;gBAAA;cAAA;YACpD;cAAA;cAAA;cAAA;YAAA,QACD,eACN;cAAK,SAAS,EAAC,UAAU;cAAA,uBACvB;gBAAI,SAAS,EAAC,OAAO;gBAAA,UAAE3B;cAAO;gBAAA;gBAAA;gBAAA;cAAA;YAAM;cAAA;cAAA;cAAA;YAAA,QAChC,eACN;cAAK,SAAS,EAAC,gBAAgB;cAAA,uBAC7B;gBAAI,SAAS,EAAC,QAAQ;gBAAA,uBACpB,QAAC,KAAK;kBAAC,QAAQ,EAAEH,YAAa;kBAAC,WAAW,EAAEa;gBAAY;kBAAA;kBAAA;kBAAA;gBAAA;cAAG;gBAAA;gBAAA;gBAAA;cAAA;YACxD;cAAA;cAAA;cAAA;YAAA,QACD;UAAA;YAAA;YAAA;YAAA;UAAA;QACF;UAAA;UAAA;UAAA;QAAA,QACF,eACN;UAAK,SAAS,EAAC,cAAc;UAAA,WAC1BD,eAAe,iBACd;YAAK,SAAS,EAAC,UAAU;YAAA,WACtBA,eAAe,CAACmB,KAAK,iBACpB;cACE,KAAK,EAAE;gBACLvB,OAAO,EAAE,MAAM;gBACfqB,KAAK,EAAE,MAAM;gBACbtB,MAAM,EAAE;cACV,CAAE;cAAA,uBAEF;gBACE,GAAG,EAAE,UAAU,GAAGK,eAAe,CAACmB,KAAM;gBACxC,GAAG,EAAC,yBAAyB;gBAC7B,KAAK,EAAE;kBACLF,KAAK,EAAE,MAAM;kBACbG,QAAQ,EAAE,OAAO;kBACjBzB,MAAM,EAAE,OAAO;kBACf0B,SAAS,EAAE;gBACb;cAAE;gBAAA;gBAAA;gBAAA;cAAA;YACF;cAAA;cAAA;cAAA;YAAA,QAEL,EACArB,eAAe,CAACsB,IAAI,iBAAI;cAAA,UAAItB,eAAe,CAACsB;YAAI;cAAA;cAAA;cAAA;YAAA,QAAK;UAAA,GArBzBtB,eAAe,CAACuB,GAAG;YAAA;YAAA;YAAA;UAAA,QAuBnD,EACAvB,eAAe,iBACd;YAAK,SAAS,EAAC,SAAS;YAAA,WACrBA,eAAe,CAACwB,OAAO,iBACtB;cACE,OAAO,EAAE,MAAMrB,kBAAkB,CAACH,eAAe,CAACwB,OAAO,CAAE;cAAA,kBAEvDxB,eAAe,CAACwB,OAAO;YAAA;cAAA;cAAA;cAAA;YAAA,QAE9B,EACAxB,eAAe,CAACyB,OAAO,iBACtB;cACE,OAAO,EAAE,MAAMtB,kBAAkB,CAACH,eAAe,CAACyB,OAAO,CAAE;cAAA,kBAEvDzB,eAAe,CAACyB,OAAO;YAAA;cAAA;cAAA;cAAA;YAAA,QAE9B,EACAzB,eAAe,CAAC0B,OAAO,iBACtB;cACE,OAAO,EAAE,MAAMvB,kBAAkB,CAACH,eAAe,CAAC0B,OAAO,CAAE;cAAA,kBAEvD1B,eAAe,CAAC0B,OAAO;YAAA;cAAA;cAAA;cAAA;YAAA,QAE9B,EACA1B,eAAe,CAAC2B,OAAO,iBACtB;cACE,OAAO,EAAE,MAAMxB,kBAAkB,CAACH,eAAe,CAAC2B,OAAO,CAAE;cAAA,kBAEvD3B,eAAe,CAAC2B,OAAO;YAAA;cAAA;cAAA;cAAA;YAAA,QAE9B;UAAA,GA5B2B3B,eAAe,CAACuB,GAAG;YAAA;YAAA;YAAA;UAAA,QA8BlD;QAAA;UAAA;UAAA;UAAA;QAAA,QACG;MAAA;QAAA;QAAA;QAAA;MAAA,QACF,eACN;QAAK,SAAS,EAAC,eAAe;QAAA,uBAC5B;UAAA,+BAAoB,wBAAAzC,KAAK,CAACF,WAAW,CAAC,wDAAlB,oBAAoB+B,KAAK,KAAI,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA;MAAK;QAAA;QAAA;QAAA;MAAA,QACnD;IAAA;MAAA;MAAA;MAAA;IAAA;EACF,iBACL;AAEP,CAAC;AAAC,GArLInC,IAAI;EAAA,QAESL,WAAW,EACXD,WAAW,EACRD,WAAW,EACjBA,WAAW,EACNA,WAAW,EACdA,WAAW,EACPA,WAAW,EACbA,WAAW,EACRA,WAAW,EAChBA,WAAW;AAAA;AAAA,KAXvBO,IAAI;AAuLV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}