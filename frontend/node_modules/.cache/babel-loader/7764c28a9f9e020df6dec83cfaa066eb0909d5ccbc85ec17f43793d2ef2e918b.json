{"ast":null,"code":"// import React from \"react\";\n// import { toast } from \"react-toastify\";\n// import { ClipLoader } from \"react-spinners\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { useNavigate } from \"react-router-dom\";\n// import SelectQuiz from \"../sub.png\";\n// import Timer from \"./Timer\";\n// import \"./index.css\";\n// import { setCurrentTeam, setTeamScore } from \"../redux/features/Team\";\n// // import React from 'react';\n// // import Popup from 'reactjs-popup';\n// // import 'reactjs-popup/dist/index.css';\n\n// const Quiz = (props) => {\n//   const navigate = useNavigate();\n//   const dispatch = useDispatch();\n//   const currentTeam = useSelector((state) => state.teams.currentTeam);\n//   const teams = useSelector((state) => state.teams.data);\n//   const totalTeams = useSelector((state) => state.teams.totalTeams);\n//   const loading = useSelector((state) => state.questions.loading);\n//   const randomIndex = useSelector((state) => state.questions.randomIndex);\n//   const questions = useSelector((state) => state.questions.data);\n//   // const [subjects, setSubjects] = useState([]);\n//   // const currentSubject = useSelector((state) => state.subjects.currentSubject);\n//   const timeDuration = useSelector((state) => state.timer.maxTime);\n//   const subject = useSelector((state) => state.teams.selectedSubject);\n\n//   if (loading) {\n//     return (\n//       <div\n//         style={{\n//           height: \"100vh\",\n//           display: \"flex\",\n//           justifyContent: \"center\",\n//           alignItems: \"center\",\n//         }}\n//       >\n//         <ClipLoader size=\"30\" />\n//       </div>\n//     );\n//   }\n//   if (questions.length === 0) {\n//     return (\n//       <div\n//         style={{\n//           height: \"100vh\",\n//           display: \"flex\",\n//           justifyContent: \"center\",\n//           alignItems: \"center\",\n//         }}\n//       >\n//         {/* <Popup posistion=' right center'  width='300px' height='300px'> */}\n//         <div> No Questions Found</div>\n//         {/* </Popup> */}\n//       </div>\n//     );\n//   }\n\n//   const currentQuestion = questions[randomIndex];\n\n//   // This function handles moving to next team or round\n//   const handleRound = () => {\n//     // Now move to next Team for current Round, but first we will make sure round is also completed\n//     if (currentTeam + 1 === totalTeams) {\n//       navigate(\"/result\", { state: { roundCompleted: true } });\n//     } else {\n//       dispatch(setCurrentTeam(currentTeam + 1));\n//       navigate(\"/subject\");\n//     }\n//   };\n\n//   const handleOptionSelect = (selectedOption) => {\n//     if (\n//       selectedOption.trim().toLowerCase() ===\n//       currentQuestion.ans.trim().toLowerCase()\n//     ) {\n//       toast.success(\"Correct !\");\n//       dispatch(\n//         setTeamScore({\n//           name: teams[currentTeam]?.teamname,\n//           score: teams[currentTeam]?.score + 10,\n//         })\n//       );\n//     } else {\n//       toast.error(\"Wrong!\");\n//     }\n//     handleRound();\n//   };\n\n//   return (\n//     <>\n//       <div\n//         className=\"quiz\"\n//         style={{\n//           backgroundImage: `url(${SelectQuiz})`,\n//           backgroundPosition: \"center center\",\n//           backgroundSize: \"cover\",\n//           backgroundRepeat: \"no-repeat\",\n//           width: \"100%\",\n//           height: \"100vh\",\n//         }}\n//       >\n//         <div className=\"container\">\n//           <div className=\"quiz-team-detail\">\n//             <div className=\"row\">\n//               <div className=\"col-lg-4 \">\n//                 {/* <h2 className=\"name\">Team {currentTeam + 1}</h2> */}\n//                 <h2 className=\"name\">\n//                   {teams[currentTeam].universityname || \"University Name\"}\n//                 </h2>\n//               </div>\n//               <div className=\"col-lg-4 \">\n//                 <h2 className=\"round\">{subject}</h2>\n//                 {/* <h2 className=\"round\">{[currentSubject].name}</h2> */}\n//               </div>\n//               <div className=\"col-lg-4   timer\">\n//                 <h1 className=\"circle\">\n//                   <Timer duration={timeDuration} handleRound={handleRound} />\n//                 </h1>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"quiz-content\">\n//             <div className=\"question\" key={currentQuestion._id}>\n//               {currentQuestion.image ? (\n//                 <div\n//                   style={{\n//                     display: \"flex\",\n//                     // justifyContent: \"center\",\n//                     // alignItems: \"center\",\n//                     width: \"100%\",\n//                     height: \"200px\",\n//                   }}\n//                 >\n//                   <img\n//                     src={\"/images/\" + currentQuestion.image}\n//                     alt=\"Cat playing with a ball\"\n//                     style={{\n//                       width: \"100%\",\n//                       maxWidth: \"500px\",\n//                       height: \"200px\",\n//                       maxHeight: \"300px\",\n//                     }}\n//                   />\n//                 </div>\n//               ) : (\n//                 currentQuestion.ques\n//               )}\n//             </div>\n//             <div className=\"options\" key={currentQuestion._id}>\n//               <p onClick={() => handleOptionSelect(currentQuestion.option1)}>\n//                 a. {currentQuestion.option1}\n//               </p>\n//               <p onClick={() => handleOptionSelect(currentQuestion.option2)}>\n//                 b. {currentQuestion.option2}\n//               </p>\n//               <p onClick={() => handleOptionSelect(currentQuestion.option3)}>\n//                 c. {currentQuestion.option3}\n//               </p>\n//               <p onClick={() => handleOptionSelect(currentQuestion.option4)}>\n//                 d. {currentQuestion.option4}\n//               </p>\n//             </div>\n//           </div>\n//           {/* <button\n//             disabled={currentQuestionIndex === questions.length - 1}\n//             onClick={handleNextQuestion}\n//           >\n//             Next Question\n//           </button> */}\n//         </div>\n//         <div className=\"current-score\">\n//           <p> Current Score: {teams[currentTeam]?.score || 0}</p>\n//         </div>\n//       </div>\n//     </>\n//   );\n// };\n\n// export default Quiz;","map":{"version":3,"names":[],"sources":["C:/Users/DELL/Desktop/Final_FYP/frontend/src/component/quiz.js"],"sourcesContent":["// import React from \"react\";\r\n// import { toast } from \"react-toastify\";\r\n// import { ClipLoader } from \"react-spinners\";\r\n// import { useSelector, useDispatch } from \"react-redux\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import SelectQuiz from \"../sub.png\";\r\n// import Timer from \"./Timer\";\r\n// import \"./index.css\";\r\n// import { setCurrentTeam, setTeamScore } from \"../redux/features/Team\";\r\n// // import React from 'react';\r\n// // import Popup from 'reactjs-popup';\r\n// // import 'reactjs-popup/dist/index.css';\r\n\r\n// const Quiz = (props) => {\r\n//   const navigate = useNavigate();\r\n//   const dispatch = useDispatch();\r\n//   const currentTeam = useSelector((state) => state.teams.currentTeam);\r\n//   const teams = useSelector((state) => state.teams.data);\r\n//   const totalTeams = useSelector((state) => state.teams.totalTeams);\r\n//   const loading = useSelector((state) => state.questions.loading);\r\n//   const randomIndex = useSelector((state) => state.questions.randomIndex);\r\n//   const questions = useSelector((state) => state.questions.data);\r\n//   // const [subjects, setSubjects] = useState([]);\r\n//   // const currentSubject = useSelector((state) => state.subjects.currentSubject);\r\n//   const timeDuration = useSelector((state) => state.timer.maxTime);\r\n//   const subject = useSelector((state) => state.teams.selectedSubject);\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <div\r\n//         style={{\r\n//           height: \"100vh\",\r\n//           display: \"flex\",\r\n//           justifyContent: \"center\",\r\n//           alignItems: \"center\",\r\n//         }}\r\n//       >\r\n//         <ClipLoader size=\"30\" />\r\n//       </div>\r\n//     );\r\n//   }\r\n//   if (questions.length === 0) {\r\n//     return (\r\n//       <div\r\n//         style={{\r\n//           height: \"100vh\",\r\n//           display: \"flex\",\r\n//           justifyContent: \"center\",\r\n//           alignItems: \"center\",\r\n//         }}\r\n//       >\r\n//         {/* <Popup posistion=' right center'  width='300px' height='300px'> */}\r\n//         <div> No Questions Found</div>\r\n//         {/* </Popup> */}\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const currentQuestion = questions[randomIndex];\r\n\r\n//   // This function handles moving to next team or round\r\n//   const handleRound = () => {\r\n//     // Now move to next Team for current Round, but first we will make sure round is also completed\r\n//     if (currentTeam + 1 === totalTeams) {\r\n//       navigate(\"/result\", { state: { roundCompleted: true } });\r\n//     } else {\r\n//       dispatch(setCurrentTeam(currentTeam + 1));\r\n//       navigate(\"/subject\");\r\n//     }\r\n//   };\r\n\r\n//   const handleOptionSelect = (selectedOption) => {\r\n//     if (\r\n//       selectedOption.trim().toLowerCase() ===\r\n//       currentQuestion.ans.trim().toLowerCase()\r\n//     ) {\r\n//       toast.success(\"Correct !\");\r\n//       dispatch(\r\n//         setTeamScore({\r\n//           name: teams[currentTeam]?.teamname,\r\n//           score: teams[currentTeam]?.score + 10,\r\n//         })\r\n//       );\r\n//     } else {\r\n//       toast.error(\"Wrong!\");\r\n//     }\r\n//     handleRound();\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div\r\n//         className=\"quiz\"\r\n//         style={{\r\n//           backgroundImage: `url(${SelectQuiz})`,\r\n//           backgroundPosition: \"center center\",\r\n//           backgroundSize: \"cover\",\r\n//           backgroundRepeat: \"no-repeat\",\r\n//           width: \"100%\",\r\n//           height: \"100vh\",\r\n//         }}\r\n//       >\r\n//         <div className=\"container\">\r\n//           <div className=\"quiz-team-detail\">\r\n//             <div className=\"row\">\r\n//               <div className=\"col-lg-4 \">\r\n//                 {/* <h2 className=\"name\">Team {currentTeam + 1}</h2> */}\r\n//                 <h2 className=\"name\">\r\n//                   {teams[currentTeam].universityname || \"University Name\"}\r\n//                 </h2>\r\n//               </div>\r\n//               <div className=\"col-lg-4 \">\r\n//                 <h2 className=\"round\">{subject}</h2>\r\n//                 {/* <h2 className=\"round\">{[currentSubject].name}</h2> */}\r\n//               </div>\r\n//               <div className=\"col-lg-4   timer\">\r\n//                 <h1 className=\"circle\">\r\n//                   <Timer duration={timeDuration} handleRound={handleRound} />\r\n//                 </h1>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"quiz-content\">\r\n//             <div className=\"question\" key={currentQuestion._id}>\r\n//               {currentQuestion.image ? (\r\n//                 <div\r\n//                   style={{\r\n//                     display: \"flex\",\r\n//                     // justifyContent: \"center\",\r\n//                     // alignItems: \"center\",\r\n//                     width: \"100%\",\r\n//                     height: \"200px\",\r\n//                   }}\r\n//                 >\r\n//                   <img\r\n//                     src={\"/images/\" + currentQuestion.image}\r\n//                     alt=\"Cat playing with a ball\"\r\n//                     style={{\r\n//                       width: \"100%\",\r\n//                       maxWidth: \"500px\",\r\n//                       height: \"200px\",\r\n//                       maxHeight: \"300px\",\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               ) : (\r\n//                 currentQuestion.ques\r\n//               )}\r\n//             </div>\r\n//             <div className=\"options\" key={currentQuestion._id}>\r\n//               <p onClick={() => handleOptionSelect(currentQuestion.option1)}>\r\n//                 a. {currentQuestion.option1}\r\n//               </p>\r\n//               <p onClick={() => handleOptionSelect(currentQuestion.option2)}>\r\n//                 b. {currentQuestion.option2}\r\n//               </p>\r\n//               <p onClick={() => handleOptionSelect(currentQuestion.option3)}>\r\n//                 c. {currentQuestion.option3}\r\n//               </p>\r\n//               <p onClick={() => handleOptionSelect(currentQuestion.option4)}>\r\n//                 d. {currentQuestion.option4}\r\n//               </p>\r\n//             </div>\r\n//           </div>\r\n//           {/* <button\r\n//             disabled={currentQuestionIndex === questions.length - 1}\r\n//             onClick={handleNextQuestion}\r\n//           >\r\n//             Next Question\r\n//           </button> */}\r\n//         </div>\r\n//         <div className=\"current-score\">\r\n//           <p> Current Score: {teams[currentTeam]?.score || 0}</p>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Quiz;\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}